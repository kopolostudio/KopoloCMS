<?php/** * Плагины для шаблонов */ class Kopolo_Template_Plugins {    /**     * Уменьшает изображение //, а затем обрезает его по центру до указанных ширины и высоты     * @version 1.2 [28.05.2010]     *      * @param  array    $params     - параметры:     *         int      $width      - ширина, до которой необходимо обрезать изображение     *         int      $height     - высота, до которой необходимо обрезать изображение     *         string   $file       - относительный путь к файлу ("/files/items/pomidor.jpg")     *         string   $alt        - альтернативный текст (HTML-атрибут alt)     *         boolean  $crop       - обрезать картинку, до указанных размеров     *         boolean  $path_only  - возвращать только путь, а не html.     *         int      $quality    - качество JPEG     *         string   $path       - полный путь к директории картинок (костыль для ada-symposium)     *      * @return string - HTML-элемент img с путем к обрезанному изображению     */    public static function resize($params)    {        /* подключение библиотек */        require_once('Image/Transform.php');        require_once('Image/Transform/Driver/GD.php');                extract ($params);                /* использование изображения-заглушки         * по-умолчанию берется из параметров         * закоментировать, если заглушка не нужна         */        if (!isset($nophoto)) {            $nophoto = '/Files/nophoto.jpg';        }                $path       = isset($path)?$path:KOPOLO_PATH;        $crop       = isset($crop)?$crop:false;        $path_only  = isset($path_only)?$path_only:false;        $quality  = isset($quality)?$quality:75;                if (empty($file)) {            if (false==$path_only) {                return '';            } else {                return false;            }        } elseif (empty($width) || empty($height)) {            if (false==$path_only) {                return 'Ошибка, не переданы параметры.';            } else {                false;            }        }        $dst_extension = array_pop(explode(".", $file));                $src_path = $path . ltrim($file, "/");        if (!file_exists($src_path)) {            if (isset($nophoto)) {                $file = $nophoto;                $dst_extension = array_pop(explode(".", $file));                $src_path = $path . ltrim($file, "/");            } else {                if (false==$path_only) {                    return 'Файл не найден<span style="display:none;">'.$src_path.'</span>';                } else {                    return false;                }            }        }                $pathinfo = pathinfo($src_path);        $return_dir = 'Tmp/Clones/' . substr ($pathinfo['dirname'], strlen($path)) . '/';        $resize_file_name = $pathinfo['filename'].'_'.$width.'x'.$height.(false==$crop?'_resize':'');        $return_path = $return_dir . $resize_file_name . '.' . $dst_extension;        $dst_path = KOPOLO_PATH . $return_path;        if (!file_exists($dst_path) && is_file($src_path)) { /* если кроп этого файла еще не создан */            $image_raito = $width/$height;            $image = Image_Transform::factory('GD');            $image->load($src_path);            $src_width = $image->getImageWidth();            $src_height = $image->getImageHeight();            $src_raito = $src_width/$src_height;            if (false==$crop) {                /*Умещаем в прямоугольник*/                if ($image_raito < $src_raito) {                    $image->fitX($width);                } else {                    $image->fitY($height);                }            } else {                /*Уменьшаем и кропим, если передан параметр crop=true*/                if ($image_raito > $src_raito) {                    /*Обрезка по высоте*/                    $image->fitX($width);                    /*Вычислим смещение по высоте, чтобы обрезанная область была по центру*/                    $subheight = $image->getNewImageHeight();                    $width_shift = 0;                    $height_shift = ($subheight-$height)/2; /*Половина разницы в высоте*/                } else {                    /*Обрезка по ширине*/                    $image->fitY($height);                    /*Вычислим смещение по ширине, чтобы обрезанная область была по центру*/                    $subwidth = $image->getNewImageWidth();                    $width_shift = ($subwidth-$width)/2; /*Половина разницы в ширине*/                    $height_shift = 0;                }                $image->crop($width,$height, $width_shift, $height_shift);            }                        /* если директория для записи файла не существует - создаем */            $return_dir_abs = KOPOLO_PATH . $return_dir;            if (!file_exists($return_dir_abs)) {                $res = mkdir($return_dir_abs, 0777, true);            }            $image->save($dst_path, $dst_extension, $quality);        }                /* наложение копирайта */        if (isset($copyright) && $copyright == 1) {            $new_file_name = Kopolo_Template_Plugins::add_copyright_picture($dst_path, $return_dir, $resize_file_name, $dst_extension);            if (!empty($new_file_name)) {                $return_path = $return_dir . $new_file_name . '.' . $dst_extension;            }        }        if (false==$path_only) {            return '<img src="/' . $return_path . '"' . (isset($alt) ? ('alt="' . $alt . '"') : '') . (isset($class) ? ('class="' . $class . '"') : '') . (isset($align) ? ('align="' . $align . '"') : '') . '/>';        } else {            return '/' . $return_path;        }    }        /**     * Добавляет на изображение картинку-копирайт     * @version 1.0 [03.03.2011]     *      * @param string абсолютный путь к изображению, на которое надо добавить копирайт     * @param string директория     * @param string название файла (без расширения)     * @param string формат изображения (расширение файла)     *      * @return string имя изображения с копирайтом or boolean     */    public static function add_copyright_picture($file_path_abs, $file_dir, $file_name, $extension) {        $copyright_file_path_abs = KOPOLO_PATH . 'Files/copyright.png';                $new_file_name = md5($file_dir . $file_name);        $new_file_path_abs = $file_dir . $new_file_name . '.' . $extension;        if (!file_exists($new_file_path_abs)) {            //получение ресурсов (в зависимости от типа изображения)            switch ($extension) {                case 'jpeg':                case 'jpg':                    $image = imagecreatefromjpeg($file_path_abs);                     break;                case 'gif':                    $image = imagecreatefromgif($file_path_abs);                     break;                case 'png':                    $image = imagecreatefrompng($file_path_abs);                     break;                default:                    break;            }            $copyright_image = imagecreatefrompng($copyright_file_path_abs); //накладываемое изображение            $copyright_width = imagesx($copyright_image);            $copyright_height = imagesy($copyright_image);                        //прозрачность            imageAlphaBlending($copyright_image, false);            imageSaveAlpha($copyright_image, true);            $trcolor = ImageColorAllocate($copyright_image, 255, 255, 255);            ImageColorTransparent($copyright_image, $trcolor);                        $image_width = imagesx($image);            $image_height = imagesy($image);                        //координаты для вставки (снизу слева)            $image_x = ($image_width>$copyright_width) ? (($image_width-$image_height)/2) : 0;            $image_y = 0;                        $copy = imagecopy($image, $copyright_image, (int)$image_x, $image_y, 0, $copyright_height-$image_height, $copyright_width, $copyright_height);                        if ($copy) {                //сохранение в директорию клонов                switch ($extension) {                    case 'jpeg':                    case 'jpg':                        $res = imagejpeg($image, $new_file_path_abs);                        break;                    case 'gif':                        $res = imagegif($image, $new_file_path_abs);                        break;                    case 'png':                        $res = imagepng($image, $new_file_path_abs);                        break;                    default:                        break;                }                imagedestroy($image);                imagedestroy($copyright_image);                if ($res) {                    @unlink($file_path_abs);                    return $new_file_name;                }            }        } else {            return $new_file_name;        }        return false;    }        /**     * Возвращает дату в "человеческом" формате     * @version 1.0     *      * @param int $timestamp     *      * @return string     */    public static function human_date ($params)    {        extract($params);        $language = 'ru';              $dates = array(        'ru' => array(            '1min' => 'Минуту назад',            '5min' => 'Пять минут назад',            '10min' => 'Десять минут назад',            '30min' => 'Полчаса назад',            '60min' => 'Час назад',            'today' => 'Сегодня',            'yesterday' => 'Вчера',            '01' => 'января',            '02' => 'февраля',            '03' => 'марта',            '04' => 'апреля',               '05' => 'мая',            '06' => 'июня',            '07' => 'июля',            '08' => 'августа',            '09' => 'сентября',            '10' => 'октября',            '11' => 'ноября',            '12' => 'декабря'        )       );              $result_date = '';          $now = time();       $diff = $now - $timestamp;                 if ($diff > 0 && $diff <= 180) {           //~Минуту назад           $result_date = $dates[$language]['1min'];           } elseif ($diff > 180 && $diff <= 420) {           //~Пять минут назад              $result_date = $dates[$language]['5min'];                  } elseif ($diff > 420 && $diff <= 1020) {           //~Десять минут назад           $result_date = $dates[$language]['10min'];       } elseif ($diff > 1020 && $diff <= 2400) {           //~Полчаса назад           $result_date = $dates[$language]['30min'];       } elseif ($diff > 2400 && $diff <= 4200) {           //~Час назад                  $result_date = $dates[$language]['60min'];       } elseif (date('d.m.Y',$now)==date('d.m.Y',$timestamp)) {           //Сегодня           $result_date = $dates[$language]['today'];       } elseif (date('d.m.Y',$now-86400)==date('d.m.Y',$timestamp)) {           //Вчера           $result_date = $dates[$language]['yesterday'];       } else {           //Все остальные даты           $result_date = date('d',$timestamp) . ' ' .                $dates[$language][date('m',$timestamp)] . ' ' .                date('Y',$timestamp);       }              return $result_date;              }    /**     * Склоняет существительное в соответствии с переданным числом     * @param int $count - число, количество     * @param string $one - ед. число им.падеж     * @param string $two - мн. число вин.падеж     * @param string $many - мн. число род.падеж     * @return string     *      * @example word_form (5, 'товар', 'товара', 'товаров') return 'товаров'     */    public static function word_form ($params, $smarty = false)    {        extract($params);        $str = (string)$count;        $lastnum = $str{strlen($str)-1};        if($count==1){            return $one;        }else if($count < 21 && $count >= 5){            return $many;        }else if($lastnum>1 && $lastnum<5){            return $two;        }else if($count >= 21 && $lastnum==1){            return $one;        }else{            return $many;        }    }}?>