<?php/** * Главный контроллер, класс страниц сайта, получает контент страницы и преобразует в HTML (Singleton) * * @author  kopolo.ru * @version 0.4 [16.11.2010] * @package System */ class Kopolo_Page{    /**     * ID главной страницы сайта     *     * @var integer     */    const MAIN_PAGE_ID = 1;        /**     * ID главной страницы сайта     *     * @var integer     */    const ERROR404_PAGE_ID = 2;            /**     * ID текущего сайта     *     * @var integer     */    public $site_id;        /**     * URL страницы (без хоста)     *     * @var string     */    public $url;        /**     * Данные, подлежащие передаче в шаблон     *     * @var object     */    public $content;        /**     * Данные страницы (свойства), объект класса Module_Pages     *     * @var object     */    private $page;        /**     * Шаблон страницы (по умолчанию index.tpl)     *     * @var string     */    private $template = 'index.tpl';        /**     * Ссылка на экземпляр класса     *     * @var object     */    private static $instance = null;        /**     * Создает единственный экземпляр класса     *     * Example:     *    $page = Kopolo_Page::getInstance();     *     * @return object $instance     */    public static function getInstance()    {        if (is_null (self::$instance)) {            self::$instance = new Kopolo_Page();        }        return self::$instance;    }    /**     * TO DO: Получение ID страницы по её URL (роутинг)     *     * @param integer ID текущего сайта     * @param array разобранный URL страницы без хоста     * @return integer ID страницы (Module_Pages)     *     * Example:     *     $page = Kopolo_Page::getInstance();     *     $page_id = $page->getIDByURL($_SERVER['REDIRECT_URL']);     */    public function getPage($site_id, $nicks)    {        /*получение объекта страницы*/        $page = new Module_Pages();        if (!count($nicks) || (count($nicks) == 1 && $nicks[0] == "")) {            $page->pg_id = self::MAIN_PAGE_ID;        } else {            //XXX костыль для временного роутинга            if (isset($_GET['nick'])) {                $page->pg_nick = $_GET['nick'];            } else {                $page->pg_nick = array_pop($nicks);            }                        if (KOPOLO_USE_ENCODED_URLS==true) {                $page->pg_nick = rawurldecode($page->pg_nick);            }        }        $page->find(true);        if ($page->N == 0 || $page->pg_is_active == 0) {            $page = new Module_Pages();            $page->get(self::ERROR404_PAGE_ID);        }        /*Подменим дату последней модификации на timestamp*/        $last_modifed_name = $page->__prefix.'last_modified';        $page->$last_modifed_name = strtotime($page->$last_modifed_name);        $this->page    = $page;        $this->site_id = $site_id;    }        /**     * Получение объекта страницы по ID     *     * @param  integer     * @return boolean     */    private function initPage($page_id) {        $page = new Module_Pages();        $page->pg_id = $page_id;        $page->find(true);        if ($page->N == 1 || $page->pg_is_active == 1) {            /*Подменим дату последней модификации на timestamp*/            $last_modifed_name = $page->__prefix.'last_modified';            $page->$last_modifed_name = strtotime($page->$last_modifed_name);            $this->page = $page;            return true;        } else {            return false;        }    }        /**     * Получение HTML компонентов страницы     *     * @return array     */    private function getPageComponents()    {        $pages_components = array();                //выбираем из базы данных компоненты и их контроллеры и шаблоны для данной страницы        $components = new Module_Components ();            $controller = new Module_Controllers ();        $components->joinAdd ($controller, 'LEFT');                $template = new Module_Templates ();        $components->joinAdd ($template, 'LEFT');                $components->whereAdd('com_site = ' . $this->site_id);        $components->whereAdd('com_is_active = 1');        $components->whereAdd('com_page=0 OR com_page=' . $this->page->pg_id);        $components->orderBy('com_page ASC, com_position ASC');        $components->find();                if ($components->N > 0) {            while ($components->fetch()) {                $component_nick = $components->com_nick;                //получение настроек компонента                $params = new Module_Params();                $component_parameters = $params->getParams($this->site_id, $components->com_id);                                //получение HTML компонента                $component_template = !empty($components->tpl_path) ? $components->tpl_path : false;                if (!empty($components->cr_nick)) {                    $component_content = $this->initComponent (ucwords($components->cr_nick), $components->com_nick, $component_template, $component_parameters);                                        //если в процессе исполнения контроллера получена ошибка 404 - загружаем страницу 404                    if ($component_content === 0) {                        $this->initError404Page();                        return array();                    }                } else {                    $component_content = '';                    //TO DO ошибка                }                                if ($component_content !== false) {                    /*если уже существует компонент с таким именем -                        добавляем к нему контент текущего блока*/                    if (isset ($pages_components[$component_nick])) {                        $pages_components[$component_nick] .= $component_content;                    } else {                        $pages_components[$component_nick] = $component_content;                    }                }            }        }        return $pages_components;    }    /**    * Вызов контроллера конкретного компонента    *    * @param string название класса контроллера    * @param string псевдоним компонента (название переменной, в которой будет храниться контент компонента в шаблоне)    * @param string путь к шаблону компонента    * @param array параметры блока для передачи в контроллер    * @return string (контент блока)    *         FALSE  (если контент блока пуст или контроллер не предусматривает возвращение контента)    *         0      (если в процессе исполнения контроллера получена ошибка 404)    */    public function initComponent($controller_nick, $component_nick, $component_template, $component_parameters)    {        $class = ucwords ($controller_nick);        $controller_class = new $class ($component_parameters);                $controller_vars = false;        if (method_exists($controller_class, 'getContent')){            $controller_vars = $controller_class->getContent();        }                //получение HTML компонента        if (isset($controller_class->error404) && $controller_class->error404 == true) {            return 0;        } else {            $component_template = !empty($component_template) ? $component_template : (!empty($controller_class->template) ? $controller_class->template : false);            if (!empty($controller_vars) && $component_template != false) {                $component_content = $this->getHTML($component_template, $controller_vars);                                if (strlen ($component_content) > 0) {                    /* если передан параметр ajax, то возвращаем содержимое блока без обертки                    по умолчанию возвращаем содержимое блока content,                    а если передано название блока - то запрашиваемый блок */                    if (isset($_REQUEST['ajax']) && $_REQUEST['ajax'] == ($component_nick == 'content' ? "" : strtolower($component_nick))) {                        echo $component_content;                        exit ();                    } else {                        return $component_content;                    }                }            }        }        return false;    }        /**     * Инициализация страницы 404     */    private function initError404Page()    {        $this->initPage(self::ERROR404_PAGE_ID);        $this->content->components = null;        //получаем заново все данные для страницы        $this->initContent();    }        /**     * Генерация HTML     *     * @param string путь к шаблону     * @param object переменные для шаблона     * @return string - HTML страницы     */    public function getHTML($template, $content)    {        $template = Kopolo_Template::factory ($template);        if ($template->error == true) {            Kopolo_Messages::warning('Не найден один из файлов шаблона, сайт может работать неправильно.');            return false;        } else {            $template->autoAssign ($content);            return $template->getHTML();        }    }        /**     * Вывод страницы в браузер     */    public function display()    {        $this->content->params = $this->getParams();        $this->initContent();        $this->content->messages = $this->getMessages();        $html = $this->getHTML($this->template, $this->content);        $this->sendHeaders();        echo $html;    }        /**     * Установка заголовка страницы     *     * @param string - заголовок     */    public function setHeader($header)    {        $this->content->page['pg_header'] = str_replace("\"", "'", strip_tags(!empty($header) ? $header : ""));    }    /**     * Установка заголовка окна браузера для страницы (HTML title)     *     * @param string - заголовок     */    public function setTitle($title = false)    {        $this->content->page['pg_title'] = str_replace("\"", "'", strip_tags(!empty($title) ? $title : $this->content->params['html_title']));                 //при использовании переменной %pagename% в заголовке, заменяем на название страницы        if (!empty($this->content->page['pg_name'])) {            $this->content->page['pg_title'] = str_replace ("%pagename%", str_replace("\"", "'", strip_tags($this->content->page['pg_name'])), $this->content->page['pg_title']);        }    }    /**     * Установка ключевых слов страницы  (HTML meta keywords)     *     * @param string - ключевые слова     */    public function setKeywords($keywords = false)    {        $this->content->page['pg_keywords'] = str_replace("\"", "'", strip_tags(!empty($keywords) ? $keywords : $this->content->params['html_keywords']));    }    /**     * Установка описания страницы  (HTML meta description)     *     * @param string - описание     */    public function setDescription($description = false)    {        $this->content->page['pg_description'] = str_replace("\"", "'", strip_tags(!empty($description) ? $description : $this->content->params['html_description']));    }        /**     * Получение данных страницы     */    private function initContent()    {        $this->content->page = $this->page->toArray();                //установка meta-тегов        $this->setTitle($this->page->pg_title);        $this->setKeywords($this->page->pg_keywords);        $this->setDescription($this->page->pg_description);                //добавление контента в реестр для использования контроллерами        Kopolo_Registry::set('content', &$this->content);                //получение компонентов страницы        $this->content->components = $this->getPageComponents();                //извлечение контента из реестра после использования контроллерами        $content = Kopolo_Registry::get('content');    }        //получение настроек сайта    private function getParams() {        $params = new Module_Params();        return $params->getParams($this->site_id);    }        //получение пользовательских сообщений    private function getMessages()    {        return Kopolo_Messages::getUserMessages();    }        /**     * Отправка HTTP-загловков     */    private function sendHeaders()    {        if (!headers_sent()) {            if ($this->page->pg_id == self::ERROR404_PAGE_ID) { //если ошибка 404                header ('HTTP/1.1 404');            }                        if (!isset ($_SERVER['HTTP_IF_MODIFIED_SINCE']) || (isset ($_SERVER['HTTP_IF_MODIFIED_SINCE']) && (strlen ($_SERVER['HTTP_IF_MODIFIED_SINCE']) == 0 || $this->page->pg_last_modified > strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE'])))) {                header ('Expires: Mon, 01 Jan 2000 00:00:00 GMT');                header ('Last-Modified: ' . gmdate ('D, d M Y H:i:s', $this->page->pg_last_modified) . ' GMT');                header ('Cache-Control: no-store, no-cache, must-revalidate');                header ('Cache-Control: post-check=0, pre-check=0', false);                header ('Pragma: no-cache');                header ('Content-Type: text/html; utf-8');            } else            {                header ('HTTP/1.1 304');                exit;            }        }    }        /**     * Конструктор класса приватный, экземпляр ядра можно получить только через Kopolo_Page::getInstance()     */    private function __construct()    {    }        /**     * Клонирование - приватный метод, экземпляр ядра можно получить только через Kopolo_Page::getInstance()     */    private function __clone()    {    }}?>